FROM resin/%%RESIN_MACHINE_NAME%%-node:8

# install apt packages
RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils clang xserver-xorg-core xserver-xorg-input-all \
  xserver-xorg-video-fbdev xorg libxcb-image0 libxcb-util0 \
  xdg-utils libdbus-1-dev libgtk2.0-dev libnotify-dev \
  libgnome-keyring-dev libgconf2-dev libasound2-dev \
  libcap-dev libcups2-dev libxtst-dev libxss1 libnss3-dev \
  libsmbclient libssh-4 fbset libav-tools libexpat-dev \
  git cmake build-essential qtbase5-dev libqt5serialport5-dev \
  libusb-1.0-0-dev python3-dev libxrender-dev libavahi-core-dev \
  libavahi-compat-libdnssd-dev libraspberrypi-dev libqt4-dev \
  arduino g++ gcc usbutils make libkrb5-dev lsof \
  imagemagick htop zip \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

# create script to start window manager
RUN echo "#!/bin/bash" > /etc/X11/xinit/xserverrc \
  && echo "" >> /etc/X11/xinit/xserverrc && echo \
  'exec /usr/bin/X -s 0 dpms -nocursor -nolisten tcp "$@"' \
  >> /etc/X11/xinit/xserverrc

# move to app dir
WORKDIR /usr/src/app

# clone and build hyperion
RUN export FIRMWARE_DIR="raspberrypi-firmware" \
  && git clone --depth 1 https://github.com/raspberrypi/firmware.git "$FIRMWARE_DIR" \
  && cp -R "$FIRMWARE_DIR/hardfp/opt/" /opt \
  && rm -rf "$FIRMWARE_DIR" \
  && export HYPERION_DIR="hyperion" \
  && git clone --recursive --depth 1 https://github.com/hyperion-project/hyperion.git "$HYPERION_DIR" \
  && mkdir "$HYPERION_DIR/build" \
  && cd "$HYPERION_DIR/build" \
  && cmake -DCMAKE_BUILD_TYPE=Release -DPLATFORM="rpi" -Wno-dev .. \
  && make -j $(nproc) \
  && mv ./bin/hyperion-remote /usr/bin/ \
  && mv ./bin/hyperiond /usr/bin/ \
  && rm -rf "/usr/src/app/$HYPERION_DIR"

# install ipfs
ENV IPFS_VERSION=0.4.14
RUN curl -O https://ipfs.io/ipns/dist.ipfs.io/go-ipfs/v${IPFS_VERSION}/go-ipfs_v${IPFS_VERSION}_linux-arm.tar.gz \
  && tar xzvf go-ipfs_v${IPFS_VERSION}_linux-arm.tar.gz \
  && cp go-ipfs/ipfs /usr/bin/ipfs \
  && rm -rf go-ipfs*

# install nodejs dependencies
COPY ./package.json ./
COPY ./libs/player/package.json ./libs/player/
RUN JOBS=MAX npm install --unsafe-perm --production \
  && npm cache clean --force && rm -rf /tmp/* \
  && cd ./libs/player/ && JOBS=MAX npm install --unsafe-perm --production \
  && npm install pm2 -g \
  && npm cache clean --force && rm -rf /tmp/* \
  && node_modules/.bin/electron-rebuild

# set variables
ENV INITSYSTEM on
ENV ARDUINODIR /usr/share/arduino
ENV BOARD uno

# open ports
EXPOSE 80 443 4001

# copy config files
COPY /volume/etc/systemd/system /etc/systemd/system/

# start systemd services
RUN systemctl enable ipfs.service && systemctl enable hyperion.service

# move app to filesystem
COPY ./app.js ./
COPY ./libs ./libs
COPY ./start.sh ./
#COPY ./volume/data/content/view-static /data/content/view-static
#VOLUME /data/content/view-static

# Start app
CMD ["bash", "/usr/src/app/start.sh"]
