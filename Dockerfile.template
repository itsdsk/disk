FROM resin/%%RESIN_MACHINE_NAME%%-node:8

# install mongodb
ADD mongodb_3_0_14_core.tar.gz /usr/bin/
ADD mongodb_3_0_14_tools.tar.gz /usr/bin/
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb \
  && mkdir -p /data/db /data/configdb /var/log/mongodb \
  && chown -R mongodb:mongodb /usr/bin/mongo* \
  /data/db  /data/configdb /var/log/mongodb
VOLUME /data/db /data/configdb
EXPOSE 27017 28017

# install nginx
RUN apt-get update && apt-get install -y --no-install-recommends \
  nginx \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

# install keystone dependency
RUN apt-get update && apt-get install -y --no-install-recommends \
  libkrb5-dev \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

# install electron dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils \
  clang \
  xserver-xorg-core \
  xserver-xorg-input-all \
  xserver-xorg-video-fbdev \
  xorg \
  libxcb-image0 \
  libxcb-util0 \
  xdg-utils \
  libdbus-1-dev \
  libgtk2.0-dev \
  libnotify-dev \
  libgnome-keyring-dev \
  libgconf2-dev \
  libasound2-dev \
  libcap-dev \
  libcups2-dev \
  libxtst-dev \
  libxss1 \
  libnss3-dev \
  libsmbclient \
  libssh-4 \
  fbset \
  libav-tools \
  libexpat-dev \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

# install hyperion dependencies
RUN apt update && apt install -y \
  git cmake build-essential qtbase5-dev libqt5serialport5-dev \
  libusb-1.0-0-dev python3-dev libxrender-dev libavahi-core-dev \
  libavahi-compat-libdnssd-dev libraspberrypi-dev libqt4-dev \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

# install arduino deps
RUN apt-get update && apt-get install -y --no-install-recommends \
  arduino \
  g++ \
  gcc \
  usbutils \
  make \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "#!/bin/bash" > /etc/X11/xinit/xserverrc \
  && echo "" >> /etc/X11/xinit/xserverrc \
  && echo 'exec /usr/bin/X -s 0 dpms -nocursor -nolisten tcp "$@"' >> /etc/X11/xinit/xserverrc

# Move to app dir
WORKDIR /usr/src/app

# move electron pkg.json to root and install
COPY ./app/package.json ./
RUN JOBS=MAX npm install --unsafe-perm --production \
  && npm cache clean --force && rm -rf /tmp/* \
&& node_modules/.bin/electron-rebuild

# Move app to filesystem
COPY ./app ./

# clone and build hyperion
RUN export FIRMWARE_DIR="raspberrypi-firmware" \
  && git clone --depth 1 https://github.com/raspberrypi/firmware.git "$FIRMWARE_DIR" \
  && cp -R "$FIRMWARE_DIR/hardfp/opt/" /opt \
  && export HYPERION_DIR="hyperion" \
  && git clone --recursive --depth 1 https://github.com/hyperion-project/hyperion.git "$HYPERION_DIR" \
  && mkdir "$HYPERION_DIR/build" \
  && cd "$HYPERION_DIR/build" \
  && cmake -DCMAKE_BUILD_TYPE=Release -DPLATFORM="rpi" -Wno-dev .. \
  && make -j $(nproc) \
  && cp ./bin/hyperion-remote /usr/bin/ \
  && cp ./bin/hyperiond /usr/bin/

# compile arduino
ENV ARDUINODIR /usr/share/arduino
ENV BOARD uno
RUN cd arduino_display && make

# install node.js servers for cms and setup
RUN cd /usr/src/app/cms && npm install \
  && cd /usr/src/app/d3 && npm install \
&& npm cache clean --force && rm -rf /tmp/*

# nginx setup
EXPOSE 80 443
COPY ../nginx-config /etc/nginx/sites-available/default

## uncomment if you want systemd
ENV INITSYSTEM on

# Start app
CMD ["bash", "/usr/src/app/start.sh"]
