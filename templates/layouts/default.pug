include ../mixins/flash-messages

doctype html
html

	head
		meta(charset="utf-8")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		meta(http-equiv="X-UA-Compatible" content="IE=edge")

		title= title || 'Disks'
		link(rel="shortcut icon", href="/favicon.ico", type="image/x-icon")

		link(href="/styles/site.css", rel="stylesheet")
		link(href="/awesome-notifications/styles.css", rel="stylesheet")
		script(src="/awesome-notifications/index.var.js")

		block css

		block head

	body

		nav.navbar.navbar-default.navbar-fixed-top
			.container
				.navbar-header
					button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar-collapse', aria-expanded='false')
						span.sr-only Toggle navigation
						span.icon-bar
						span.icon-bar
						span.icon-bar
					a.navbar-brand(href='/') ☉ Disks
					.navbar-left
						if section == "media"
							ul(id='mediaTabs').nav.navbar-nav.navbar-left
								li.active
									a(data-toggle='tab' href='#preview') Preview
								li
									a(data-toggle='tab' href='#details') Details
						else
							form(action='/api/media/queue' method='post' class='post-form-ajax' role='search').navbar-form
								.input-group
									input(name='address' type='text', placeholder='Enter URL to Display' required).form-control
									.input-group-btn
										button(type='submit').btn.btn-default
											i.glyphicon.glyphicon-play-circle
				.collapse.navbar-collapse#navbar-collapse
					ul.nav.navbar-nav.navbar-right
						each link in navLinks
							li(class=(section == link.key ? 'active' : null)): a(href=link.href)= link.label
						li.dropdown
							a.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false')
								span(id='status-dot')
								| &thinsp; Status
								span.caret
							ul.dropdown-menu
								each component in componentStatus
									if !component.active
										li.inactive-component
											a=component.name
												| &thinsp;(offline)
									else
										li
											a=component.name
												| &thinsp;(online)
		#body
			block intro
			+flash-messages(messages)
			block content
		script(src='/js/jquery/jquery-2.1.4.min.js')
		script(src='/js/bootstrap/bootstrap-3.3.5.min.js')
		script.
			// add awesome-notifications obj
			var options = {
				icons: {enabled: false},
				labels: {
					tip: "Your custom tip box label"
				}
			}
			var notifier = new AWN(options);
			// space body away from navbar
			$('body')[0].style.paddingTop = $('.navbar').height() + 20 + 'px';
			// component status
			var dotStyle = 'height: 10px;  width: 10px;  border-radius: 50%;  display: inline-block; background-color: '
			$('#status-dot').attr('style', dotStyle+'gray;');
			var flashMsgDiv = '<div id="flash-messages" class="container"></div>';
			$('#body').prepend(flashMsgDiv);
			$(function() {
				// status check
				var badConnections = new Array();
				// get names of inactive components from HTML elements
				$('.inactive-component').each(function(i, p) {
					badConnections.push(p.textContent);
				})
				if(!(badConnections.length === 0)){
					$('#status-dot').attr('style', dotStyle+'red;');
					var flashMsg = '<div class="alert alert-danger">ⓘ&emsp;Connection to the ';
					if(badConnections.length === 1){
						flashMsg += badConnections[0] + ' component ';
					}else{
						for(var i=0; i<badConnections.length-1; i++)
						{
							flashMsg += (badConnections[i] + ', ');
						};
						flashMsg = flashMsg.slice(0, -2);
						flashMsg += ' and ' + badConnections[badConnections.length-1] + ' components ';
					}
					flashMsg += 'is unavailable.';
					$('#flash-messages').prepend(flashMsg+'</div>');
				}else{
					$('#status-dot').attr('style', dotStyle+'green;');
				}
				// play sketch
				function displayClicked(e) {
					//
					e.preventDefault();
					var url = $(this).parent().attr('href');
					$.ajax({url: url, async: false,
						error: function(result){
							notifier.alert('Could not play sketch. Is the player connected?');
						},
						success: function(result){
							notifier.success('Queued to display!');
						}
					});
				}
				$('.display-btn').click( displayClicked );
				// play linked sketch
				function displayLinked(e) {
					//
					e.preventDefault();
					var url = $(this).attr('href');
					$.ajax({url: url, async: false,
						error: function(result){
							notifier.alert('Could not play sketch. Is the player connected?');
						},
						success: function(result){
							notifier.success('Queued to display!');
						}
					});
				}
				$('.display-link').click( displayLinked );
				
				// post form to server in background
				$('.post-form-ajax').submit(function(event){
					event.preventDefault();
					var post_url = $(this).attr('action');
					var request_method = $(this).attr('method');
					var form_data = $(this).serialize();
					$.ajax({
						url: post_url,
						type: request_method,
						data: form_data,
						error: function(result){
							console.log('ERROR: ' + JSON.stringify(result.responseJSON.error.note));
							notifier.alert(result.responseJSON.error.note);
						},
						success: function(result){
							console.log('SUCCESS: ' + JSON.stringify(result.note));
							notifier.success(result.note);
						}
					});

				})

			});
		.container: #footer
		block js
