extends ../layouts/default

block content
	if setupSubmitted
		.container: .jumbotron
			h1 Success!
			.lead Your device should be ready soon
	else
		.container: .row
			.col-sm-8.col-md-8
				.page-header
					a(href='/setup' id='make-editable').btn.btn-default.pull-right ðŸ”“&emsp;Configure
					h1 Output
				//- form(action='/api/display/configure' method='post' class='post-form-ajax' id='config-form').form-horizontal
				form(action='/api/leds/config-arduino' method='post' class='post-form-ajax' id='config-form').form-horizontal
					fieldset(disabled='disabled')
						input(type='hidden', name='action', value='setup')
						.form-group
							label.col-sm-2.control-label LED Count
							.col-sm-10
								input(type='number' name='numLeds' id='numLedsInput' value=formData.numLeds required placeholder='(required)').form-control
						.form-group(class=validationErrors.ledChip ? 'has-error' : null required)
							label.col-sm-2.control-label LED Chipset
							.col-sm-10
								select(name='ledChip' id='ledChip' required).form-control
									option(value='' class = '') (required)
									each type in ledChips
										option(value=type.value class=type.pins selected=formData.ledChip === type.value)= type.label
						.form-group(class=validationErrors.ledOrders ? 'has-error' : null required)
							label.col-sm-2.control-label Color Order
							.col-sm-10
								select(name='ledOrder' id='ledOrderInput' required).form-control
									option(value='') (required)
									each type in ledOrders
										option(value=type.value selected=formData.ledOrder === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null required)
							label.col-sm-2.control-label Platform
							.col-sm-10
								select(name='boardType' id='platformInput' required).form-control
									option(value='') (required)
									each type in boardTypes
										option(value=type.value selected=formData.boardType === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null required)
							label.col-sm-2.control-label Data Pin
							.col-sm-10
								select(name='dataPin' id='dataPinInput' required).form-control
									option(value='') (required)
									each type in dataPins
										option(value=type.value selected=formData.dataPin === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null id='clockPinDiv').hidden
							label.col-sm-2.control-label Clock Pin
							.col-sm-10
								select(name='clockPin' id='clockPinSelect').form-control
									option(value='') (required)
									each type in clockPins
										option(value=type.value selected=formData.clockPin === type.value)= type.label
						.form-group
							.col-sm-10.col-sm-offset-2
								button(type='submit' id='uploadConfigBtn').btn.btn-primary Upload
			.col-sm-4.col-md-4
				h4.list-group-item LEDs
				// top left blue button
				//h4: h(href='').btn.btn-primary LEDs
				.list-group
					div(id='leds').list-group-item.led-svg
					a(id='save-led-map').btn.btn-default.list-group-item ðŸ’¾&emsp;Save
					div(id='collapse1').panel-collapse.collapse
						a.list-group-item <b>Upload specification:</b>
						p.list-group-item .json
						code.list-group-item {	"leds": [ { "x": 0.2222, "y": 0.1111 }, ...
						p.list-group-item .csv
						code.list-group-item to be implemented
						p.list-group-item .xml
						code.list-group-item to be implemented
						.form-horizontal.list-group-item
							input(type='file' id='hidden-file-upload' accept='text/xml, text/csv, application/json').hidden
							a(id='upload-map').btn.btn-default.list-group-item â–²&emsp;Upload

						//- .form-horizontal.list-group-item
						//- 	input(type='file' id='hidden-file-upload' accept='text/xml, text/csv, application/json').hidden
						//- 	a(href='/setup' id='upload-map').btn.btn-default.list-group-item ðŸ”“&emsp;Upload
						//- .form-horizontal.list-group-item
							//- input(type='file' id='hidden-file-upload' accept='text/xml, text/csv, application/json').hidden
							//input(id='upload-map' type='image' title='upload map' src='upload-icon.png' alt='upload map')
					a(data-toggle='collapse' href='#collapse1').btn.btn-primary.pull-right= 'Map positions'
				//- .form-horizontal
				//- 	input(type='file' id='hidden-file-upload' accept='text/xml, text/csv, application/json').hidden
				//- 	input(id='upload-map' type='image' title='upload map' src='upload-icon.png' alt='upload map')


			//- .form-group
			//- 	label.col-sm-2.control-label LED Mapping File
			//- 	.col-sm-10
			//- 		input(type='file' name='mapping').form-control

block js
	script(src='https://d3js.org/d3.v5.js')
	//- script(src="//cdn.jsdelivr.net/filesaver.js/0.1/FileSaver.min.js")
	script.
		//
		var width = 500,
			height = 500,
			padding = 15;
		
		var svgContainer = d3.selectAll('.led-svg').append('svg')
			.attr('viewBox', '0 0 ' + width + ' ' + height);
			//- .attr("width", width)
			//- .attr("height", height);

		svgContainer.append('rect')
			.attr('width', '100%')
			.attr('height', '100%')
			.attr('fill', 'white');


		// load leds.json and visualise
		d3.json('/config-static/leds.json').then( function(data) {
			visualiseLeds(data)
		});
		function visualiseLeds(data) {
			// get range of data
			var minX = d3.min(data.leds, function(d) {return d.x});
			var maxX = d3.max(data.leds, function(d) {return d.x});
			var minY = d3.min(data.leds, function(d) {return d.y});
			var maxY = d3.max(data.leds, function(d) {return d.y});
			var scaleX = d3.scaleLinear()
				.domain([minX,maxX])
				.range([padding, width-padding]);
			var scaleY = d3.scaleLinear()
				.domain([minY,maxY])
				.range([padding, height-padding]);

			// draw path
			var line = d3.line()
				.curve(d3.curveLinear)
				.x(function(d) { return scaleX(d.x); })
				.y(function(d) { return scaleY(d.y); });
			var path = svgContainer.selectAll('.ledPath')
				.data([0]);
			path.exit().remove();
			var new_path = path.enter()
				.append('path')
				.attr('class', 'ledPath')
				.attr('fill', 'none')
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.5*padding)
				.attr('d', line(data.leds));
			new_path.merge(path)
				.attr('d', line(data.leds));

			// draw leds
			var circles = svgContainer.selectAll('.ledNode')
				.data(data.leds);
			circles.exit().remove();
			var new_circles = circles.enter()
				.append('circle')
				.attr('class', 'ledNode')
				.attr('cx', function(d) { return scaleX(d.x); })
				.attr('cy', function(d) { return scaleY(d.y); })
				.attr('r', function(d) { return 0.7*padding; })
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.33*padding)
				.attr('fill', 'white');
			new_circles.merge(circles)
				.attr('cx', function(d) { return scaleX(d.x); })
				.attr('cy', function(d) { return scaleY(d.y); })
				.attr('r', function(d) { return 0.7*padding; })
		}
		// led mapping file upload
		d3.select('#upload-map').on('click', function(){
			document.getElementById('hidden-file-upload').click();
		});
		d3.select('#hidden-file-upload').on('change', function(){
			if(window.File && window.FileReader && window.FileList && window.Blob) {
				//
				const uploadFile = this.files[0];
				const uploadFileName = uploadFile.name.split('.').pop();
				const fileReader = new window.FileReader();
				fileReader.onload = function(){
					const txtRes = fileReader.result;
					switch(uploadFileName) {
						case 'xml':
							try{
								const xmlRes = d3.xml.parse(txtRes);
								visualiseLeds(xmlRes);
							}catch(err){
								window.alert('Error parsing XML map: ' + err);
								return;
							}
							break;
						case 'json':
							try{
								const jsonRes = JSON.parse(txtRes);
								visualiseLeds(jsonRes);
							}catch(err){
								window.alert('Error parsing JSON map: ' + err);
								return;
							}
							break;
						case 'csv':
							try{
								const csvRes = d3.csv.parse(txtRes);
								visualiseLeds(csvRes);
								// check file properties https://stackoverflow.com/questions/36079390/parse-uploaded-csv-file-using-d3-js
							}catch(err){
								window.alert('Error parsing CSV map: ' + err);
								return;
							}
							break;
						default:
							//
					}
				}
				fileReader.readAsText(uploadFile);
			}
		})
		//- const reader = new FileReader();
		//- function loadFile(){
		//- 	const file = document.querySelector('input[type=file]').files[0];
		//- 	d3.json(file).then(function(data) {
		//- 		console.log(data);
		//- 	});
		//- 	reader.addEventListener("load", parseFile, false);
		//- 	if(file) {
		//- 		reader.readAsText(file);
		//- 	}
		//- }
		//- function parseFile(){
		//- 	const doesColumnExist = false;
		//- 	var data = d3.json.parse(reader.result, function(d){
		//- 		doesColumnExist = d.hasOwnProperty('someColumn');
		//- 		return d;
		//- 	});
		//- 	console.log(doesColumnExist);
		//- }

	script.
		jQuery(function($) {

			// show/hide CLOCK_PIN form field based on selected LED chipset
			$('.3pin').on('click', function(e) {
				// add hidden class
				$('#clockPinDiv').addClass('hidden');
				// remove 'required' property
				$('#clockPinDiv').removeAttr('required');
				$('#clockPinSelect').removeAttr('required');
			});
			$('.4pin').on('click', function(e) {
				// remove hidden class
				$('#clockPinDiv').removeClass('hidden');
				// add 'required' property
				$('#clockPinDiv').attr('required', 'required');
				$('#clockPinSelect').attr('required', 'required');
			});

			// make form editable
			$('#make-editable').click(function(e){
				e.preventDefault();
				$('fieldset').removeAttr('disabled');
			})
			// save led map
			function saveMap(e) {

				e.preventDefault();

				var points = {"leds": []};

				d3.selectAll('.ledNode').each(function (d, i) {
					points.leds.push({x: d.x, y: d.y});
				});

				//- $.post('/api/player/map', '&leds=' + JSON.stringify(points), function (data) {
				$.post('/api/leds/map-positions', '&leds=' + JSON.stringify(points), function (data) {
					if (data.err) {
						console.log('error solve');
						return;
					}
				});
			}
			$("#save-led-map").click(saveMap);

			//- // post new output config to server in background
			//- $('#config-form').submit(function(event){
			//- 	event.preventDefault();
			//- 	var post_url = $(this).attr('action');
			//- 	var request_method = $(this).attr('method');
			//- 	var form_data = $(this).serialize();
			//- 	$.ajax({
			//- 		url: post_url,
			//- 		type: request_method,
			//- 		data: form_data,
			//- 		error: function(result){
			//- 			console.log('error updating config ' + JSON.stringify(result.responseJSON.error.note));
			//- 			notifier.alert('error updating config' + result.responseJSON.error.note);
			//- 		},
			//- 		success: function(result){
			//- 			console.log('updated config ' + JSON.stringify(result.note));
			//- 			notifier.success('updated config ' + result.note);
			//- 		}
			//- 	});

			//- })
		});
		$(function() {
			// get existing settings from file
			$.ajax({url: '/config-static/setup.json', async: true, 
				error: function(){
					var flashMsg = '<div class="alert alert-error">â“˜&emsp;Set the settings below to start</div>'
					$('#flash-messages').prepend(flashMsg);
				},
				success: function(result){
					//- var flashMsg = '<div class="alert alert-success">â“˜&emsp;Loaded config from settings file</div>'
					//- $('#flash-messages').prepend(flashMsg);
					// set lednum from setup.json
					if(result.ledcount){
						$('#numLedsInput').val(result.ledcount)
					}else{
						console.log('error: no ledcount property found in setup.json');
					}
					// set chipset from setup.json
					if(result.chipset){
						$('#ledChip').val(result.chipset)
					}else{
						console.log('error: no ledchipset property found in setup.json');
					}
					// set order from setup.json
					if(result.order){
						$('#ledOrderInput').val(result.order)
					}else{
						console.log('error: no led order property found in setup.json');
					}
					// set platform from setup.json
					if(result.platform){
						$('#platformInput').val(result.platform)
					}else{
						console.log('error: no board/platform property found in setup.json');
					}
					// set data pin from setup.json
					if(result.datapin){
						$('#dataPinInput').val(result.datapin)
					}else{
						console.log('error: no datapin property found in setup.json');
					}
					// set data pin from setup.json * logic needed here to check clockpin exists?
					if(result.clockpin){
						// remove hidden class
						$('#clockPinDiv').removeClass('hidden');
						// add 'required' property
						$('#clockPinDiv').attr('required', 'required');
						$('#clockPinSelect').attr('required', 'required');
						// set form var
						$('#clockPinSelect').val(result.clockpin)
					}else{
						console.log('error: no clockpin property found in setup.json');
					}

				}
			});
		});