extends ../layouts/default

block content
	if setupSubmitted
		.container: .jumbotron
			h1 Success!
			.lead Your device should be ready soon
	else
		.container: .row
			.col-sm-8.col-md-8
				div(id='leds').led-svg
			.col-sm-4.col-md-4
				.panel.panel-default
					.panel-heading
						label(for='brightness-range')
							span.glyphicon.glyphicon-adjust
							input(type='range', min='0.0', max='1.0', step='0.01', value='1.0', class='slider', id='brightness-range').brightnessSlider
					.panel-body
						h4
							button(type='submit').btn.btn-info.btn-sm.pull-right Update Colour Values
							span.glyphicon.glyphicon-asterisk
						form(method='POST' action='/api/leds/calibrate').post-form-ajax
							.form-group
								label(for='colourOrder') Colour Order:
								select(id='colourOrder' name='colOrder').form-control
									option(value='rgb' selected=profile.colOrder==='rgb') RGB
									option(value='rbg' selected=profile.colOrder==='rbg') RBG
									option(value='brg' selected=profile.colOrder==='brg') BRG
									option(value='bgr' selected=profile.colOrder==='bgr') BGR
									option(value='grb' selected=profile.colOrder==='grb') GRB
									option(value='gbr' selected=profile.colOrder==='gbr') GBR
							label Colour Calibration:
							.panel-group(id='colourAdjust')
								.panel.panel-default
									.panel-heading
										h4.panel-title
											a(data-toggle='collapse' data-parent='#colourAdjust' href='#redAdjust')
												| Pure Red
									.panel-collapse.collapse(id='redAdjust')
										.panel-body
											label(for='redAdjR') R:
											input(type='range', min='0', max='255', step='1', value=profile.redR, name='redR', class='slider', id='redAdjR')
											label(for='redAdjG') G:
											input(type='range', min='0', max='255', step='1', value=profile.redG, name='redG', class='slider', id='redAdjG')
											label(for='redAdjB') B:
											input(type='range', min='0', max='255', step='1', value=profile.redB, name='redB', class='slider', id='redAdjB')
								.panel.panel-default
									.panel-heading
										h4.panel-title
											a(data-toggle='collapse' data-parent='#colourAdjust' href='#greenAdjust')
												| Pure Green
									.panel-collapse.collapse(id='greenAdjust')
										.panel-body
											label(for='greenAdjR') R:
											input(type='range', min='0', max='255', step='1', value=profile.greenR, name='greenR', class='slider', id='greenAdjR')
											label(for='greenAdjG') G:
											input(type='range', min='0', max='255', step='1', value=profile.greenG, name='greenG', class='slider', id='greenAdjG')
											label(for='greenAdjB') B:
											input(type='range', min='0', max='255', step='1', value=profile.greenB, name='greenB', class='slider', id='greenAdjB')
								.panel.panel-default
									.panel-heading
										h4.panel-title
											a(data-toggle='collapse' data-parent='#colourAdjust' href='#blueAdjust')
												| Pure Blue
									.panel-collapse.collapse(id='blueAdjust')
										.panel-body
											label(for='blueAdjR') R:
											input(type='range', min='0', max='255', step='1', value=profile.blueR, name='blueR', class='slider', id='blueAdjR')
											label(for='blueAdjG') G:
											input(type='range', min='0', max='255', step='1', value=profile.blueG, name='blueG', class='slider', id='blueAdjG')
											label(for='blueAdjB') B:
											input(type='range', min='0', max='255', step='1', value=profile.blueB, name='blueB', class='slider', id='blueAdjB')
						h4
							button(type='button' data-toggle='modal' data-target='#formatInfo').btn.btn-link.btn-sm.pull-right See accepted formats
							span.glyphicon.glyphicon-random
						input(type='file' id='hidden-file-upload' accept='text/xml, text/csv, application/json').hidden
						.btn-group-vertical.btn-block
							a(id='upload-map').btn.btn-default.btn-block.btn-lg
								.text-left Upload LED Mapping
							a(id='save-led-map').btn.btn-default.btn-block.btn-lg
								.text-left Restart LED Interface
						h4
							a(href='/screenshot.png' target='_blank').btn.btn-link.btn-sm.pull-right View last screenshot
							span.glyphicon.glyphicon-magnet
						.btn-group-vertical.btn-block
							a(href='/api/screenshot').btn.btn-default.btn-lg.btn-block.api-get-btn
								.text-left Screenshot
							a(href='/api/media/list/init').btn.btn-default.btn-lg.btn-block.api-get-btn
								.text-left Rescan Media
							a(href='/api/identity').btn.btn-default.btn-lg.btn-block.api-get-btn
								.text-left Get IPFS Address
						h4
							span.glyphicon.glyphicon-flash
						.btn-group-vertical.btn-block
							a(href='/api/system/reboot').btn.btn-default.btn-lg.btn-block.api-get-btn
								.text-left Reboot
							a(href='/api/system/shutdown').btn.btn-default.btn-lg.btn-block.api-get-btn
								.text-left Shutdown
			.col-sm-12.col-md-12
				.page-header
					a(href='/setup' id='make-editable').btn.btn-default.pull-right ðŸ”“&emsp;Configure
					h1 Hardware
				form(action='/api/leds/config-arduino' method='post' class='post-form-ajax' id='config-form').form-horizontal
					fieldset(disabled='disabled')
						input(type='hidden', name='action', value='setup')
						.form-group
							label.col-sm-2.control-label LED Count
							.col-sm-10
								input(type='number' name='numLeds' id='numLedsInput' value=formData.numLeds required placeholder='(required)').form-control
						.form-group(class=validationErrors.ledChip ? 'has-error' : null required)
							label.col-sm-2.control-label LED Chipset
							.col-sm-10
								select(name='ledChip' id='ledChip' required).form-control
									option(value='' class = '') (required)
									each type in ledChips
										option(value=type.value class=type.pins selected=formData.ledChip === type.value)= type.label
						.form-group(class=validationErrors.ledOrders ? 'has-error' : null required)
							label.col-sm-2.control-label Color Order
							.col-sm-10
								select(name='ledOrder' id='ledOrderInput' required).form-control
									option(value='') (required)
									each type in ledOrders
										option(value=type.value selected=formData.ledOrder === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null required)
							label.col-sm-2.control-label Platform
							.col-sm-10
								select(name='boardType' id='platformInput' required).form-control
									option(value='') (required)
									each type in boardTypes
										option(value=type.value selected=formData.boardType === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null required)
							label.col-sm-2.control-label Data Pin
							.col-sm-10
								select(name='dataPin' id='dataPinInput' required).form-control
									option(value='') (required)
									each type in dataPins
										option(value=type.value selected=formData.dataPin === type.value)= type.label
						.form-group(class=validationErrors.boardType ? 'has-error' : null id='clockPinDiv').hidden
							label.col-sm-2.control-label Clock Pin
							.col-sm-10
								select(name='clockPin' id='clockPinSelect').form-control
									option(value='') (required)
									each type in clockPins
										option(value=type.value selected=formData.clockPin === type.value)= type.label
						.form-group
							.col-sm-10.col-sm-offset-2
								button(type='submit' id='uploadConfigBtn').btn.btn-primary Upload
			div(id='formatInfo' role='dialog').modal.fade
				.modal-dialog
					.modal-content
						.modal-header
							.button(type='button' data-dismiss='modal').close &times;
							h4.modal-title Accepted LED Mapping Formats
						.modal-body
							kbd JSON:
							pre
								| {
								|   "leds": [
								|     { "x": 0.25, "y": 0.25, "r": 0.1 },
								|     { "x": 0.50, "y": 0.50, "r": 0.1 },
								|     { "x": 0.75, "y": 0.75, "r": 0.1 }
								|   ]
								| }
							kbd CSV:
							pre
								| x,y,r
								| 0.25,0.25,0.1
								| 0.50,0.50,0.1
								| 0.75,0.75,0.1
							kbd XML:
							pre
								| <&#8203;data>
								|     <&#8203;led> <&#8203;x>0.25<&#8203;/x> <&#8203;y>0.25<&#8203;/y> <&#8203;r>0.1<&#8203;/r> <&#8203;/led>
								|     <&#8203;led> <&#8203;x>0.50<&#8203;/x> <&#8203;y>0.50<&#8203;/y> <&#8203;r>0.1<&#8203;/r> <&#8203;/led>
								|     <&#8203;led> <&#8203;x>0.75<&#8203;/x> <&#8203;y>0.75<&#8203;/y> <&#8203;r>0.1<&#8203;/r> <&#8203;/led>
								| <&#8203;/data>
						.modal-footer
							button(type='button' data-dismiss='modal').btn.btn-default Close
block js
	script.
		//
		var width = 500,
			height = 500,
			padding = 15;
		var svgContainer = d3.selectAll('.led-svg').append('svg')
			.attr('viewBox', '0 0 ' + width + ' ' + height);
		svgContainer.append('rect')
			.attr('width', '100%')
			.attr('height', '100%')
			.attr('fill', 'white');
		// load leds.json and visualise
		d3.json('/config-static/leds.json').then( function(data) {
			visualiseLeds(data.leds)
		});
		function visualiseLeds(data) {
			// get range of data
			var minX = d3.min(data, function(d) {return d.x});
			var maxX = d3.max(data, function(d) {return d.x});
			var minY = d3.min(data, function(d) {return d.y});
			var maxY = d3.max(data, function(d) {return d.y});
			var scaleX = d3.scaleLinear()
				.domain([minX,maxX])
				.range([padding, width-padding]);
			var scaleY = d3.scaleLinear()
				.domain([minY,maxY])
				.range([padding, height-padding]);
			// draw path
			var line = d3.line()
				.curve(d3.curveLinear)
				.x(function(d) { return scaleX(d.x); })
				.y(function(d) { return scaleY(d.y); });
			var path = svgContainer.selectAll('.ledPath')
				.data([0]);
			path.exit().remove();
			var new_path = path.enter()
				.append('path')
				.attr('class', 'ledPath')
				.attr('fill', 'none')
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.5*padding)
				.attr('d', line(data));
			new_path.merge(path)
				.attr('d', line(data));
			// draw leds
			var circles = svgContainer.selectAll('.ledNode')
				.data(data);
			circles.exit().remove();
			var new_circles = circles.enter()
				.append('circle')
				.attr('class', 'ledNode')
				.attr('cx', function(d) { return scaleX(d.x); })
				.attr('cy', function(d) { return scaleY(d.y); })
				.attr('r', function(d) { return scaleX(2.5*d.r); })
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.33*padding)
				.attr('fill', 'white');
			new_circles.merge(circles)
				.attr('cx', function(d) { return scaleX(d.x); })
				.attr('cy', function(d) { return scaleY(d.y); })
				.attr('r', function(d) { return scaleX(2.5*d.r); })
		}
		// led mapping file upload
		d3.select('#upload-map').on('click', function(){
			document.getElementById('hidden-file-upload').click();
		});
		d3.select('#hidden-file-upload').on('change', function(){
			if(window.File && window.FileReader && window.FileList && window.Blob) {
				//
				const uploadFile = this.files[0];
				const uploadFileName = uploadFile.name.split('.').pop();
				const fileReader = new window.FileReader();
				fileReader.onload = function(){
					const txtRes = fileReader.result;
					switch(uploadFileName) {
						case 'xml':
							try{
								// parse contents of file into an XML document
								var parser = new DOMParser();
								var xmlRes = parser.parseFromString(txtRes, "text/xml");
								// convert XML document into an array of objects
								xmlRes = [].map.call(xmlRes.querySelectorAll("led"), function(led) {
									return {
										x: +led.querySelector("x").textContent,
										y: +led.querySelector("y").textContent,
										r: +led.querySelector("r").textContent
									}
								});
								visualiseLeds(xmlRes);
							}catch(err){
								window.alert('Error parsing XML map: ' + err);
								return;
							}
							break;
						case 'json':
							try{
								const jsonRes = JSON.parse(txtRes);
								visualiseLeds(jsonRes.leds);
							}catch(err){
								window.alert('Error parsing JSON map: ' + err);
								return;
							}
							break;
						case 'csv':
							try{
								const csvRes = d3.csvParse(txtRes);
								// parse ints
								for(var i=0; i<csvRes.length; i++){
									csvRes[i].x = parseFloat(csvRes[i].x);
									csvRes[i].y = parseFloat(csvRes[i].y);
									csvRes[i].r = parseFloat(csvRes[i].r);
								}
								visualiseLeds(csvRes);
							}catch(err){
								window.alert('Error parsing CSV map: ' + err);
								return;
							}
							break;
						default:
							//
					}
				}
				fileReader.readAsText(uploadFile);
			}
		})
	script.
		jQuery(function($) {
			// show/hide CLOCK_PIN form field based on selected LED chipset
			$('.3pin').on('click', function(e) {
				// add hidden class
				$('#clockPinDiv').addClass('hidden');
				// remove 'required' property
				$('#clockPinDiv').removeAttr('required');
				$('#clockPinSelect').removeAttr('required');
			});
			$('.4pin').on('click', function(e) {
				// remove hidden class
				$('#clockPinDiv').removeClass('hidden');
				// add 'required' property
				$('#clockPinDiv').attr('required', 'required');
				$('#clockPinSelect').attr('required', 'required');
			});
			// make form editable
			$('#make-editable').click(function(e){
				e.preventDefault();
				$('fieldset').removeAttr('disabled');
			})
			// save led map
			function saveMap(e) {
				e.preventDefault();
				// serialise led coords
				var points = {"leds": []};
				d3.selectAll('.ledNode').each(function (d, i) {
					points.leds.push({x: d.x, y: d.y, r: d.r});
				});
				// send coords to server
				$.ajax({
					url: '/api/leds/map-positions',
					type: 'POST',
					data: '&leds=' + JSON.stringify(points),
						error: function(result){
							console.log('ERROR: ' + JSON.stringify(result.responseJSON.error.note));
							notifier.alert(result.responseJSON.error.note);
						},
						success: function(result){
							console.log('SUCCESS: ' + JSON.stringify(result.note));
							notifier.success(result.note);
						}
				});
			}
			$("#save-led-map").click(saveMap);
		});
		$(function() {
			// get existing settings from file
			$.ajax({url: '/config-static/setup.json', async: true, 
				error: function(){
					var flashMsg = '<div class="alert alert-error">â“˜&emsp;Set the settings below to start</div>'
					$('#flash-messages').prepend(flashMsg);
				},
				success: function(result){
					// set lednum from setup.json
					if(result.ledcount){
						$('#numLedsInput').val(result.ledcount)
					}else{
						console.log('error: no ledcount property found in setup.json');
					}
					// set chipset from setup.json
					if(result.chipset){
						$('#ledChip').val(result.chipset)
					}else{
						console.log('error: no ledchipset property found in setup.json');
					}
					// set order from setup.json
					if(result.order){
						$('#ledOrderInput').val(result.order)
					}else{
						console.log('error: no led order property found in setup.json');
					}
					// set platform from setup.json
					if(result.platform){
						$('#platformInput').val(result.platform)
					}else{
						console.log('error: no board/platform property found in setup.json');
					}
					// set data pin from setup.json
					if(result.datapin){
						$('#dataPinInput').val(result.datapin)
					}else{
						console.log('error: no datapin property found in setup.json');
					}
					// set data pin from setup.json * logic needed here to check clockpin exists?
					if(result.clockpin){
						// remove hidden class
						$('#clockPinDiv').removeClass('hidden');
						// add 'required' property
						$('#clockPinDiv').attr('required', 'required');
						$('#clockPinSelect').attr('required', 'required');
						// set form var
						$('#clockPinSelect').val(result.clockpin)
					}else{
						console.log('error: no clockpin property found in setup.json');
					}
				}
			});
		});