extends ../layouts/default

mixin mediaMixin(item)
	a(data-toggle="modal", data-target='#modal-'+item.id)
		if item.prefThumb
			img(src='/view-static/'+item.localDir+'/'+item.prefThumb).img-responsive
		else
			img(src="http://placehold.it/300x300").img-responsive
	div(id='modal-'+item.id, role='dialog').modal.fade
		.modal-dialog.modal-sm
			.modal-content
				.modal-header
					button(type='button', class='close', data-dismiss='modal') &times;
					- var itemid = item.id.slice(-6);
					h4.modal-title <strong>Disk </strong><i><small>##{itemid}</small></i>
				.modal-body
					a(href='/api/media/' + item.id + '/play').btn.btn-primary.btn-lg.btn-block.api-get-btn
						span.glyphicon.glyphicon-play
					a(href='/media/'+item._id, target='_blank').btn.btn-default.btn-lg.btn-block
						.text-left
							| Preview
					a(href='/media/'+item._id+'#details', target='_blank').btn.btn-default.btn-lg.btn-block
						.text-left
							| Edit
					a(href='/api/media/' + item.id + '/share').btn.btn-default.btn-lg.btn-block.api-get-btn
						.text-left
							| Share
					if item.ipfsHash
						a(href='https://gateway.ipfs.io/ipfs/' + item.ipfsHash, target='_blank').btn.btn-default.btn-lg.btn-block
							.text-left
								| View on IPFS
				.modal-footer
					button(type='button', data-dismiss='modal').btn.btn-default Close
block content
	.container: .row 
		.col-sm-8.col-md-8
			if filters.channel && !data.channel 
				h3.text-muted Invalid channel. 
			else
				if data.media.results.length
					if data.media.totalPages > 1
						.lead.text-muted Showing 
							strong #{data.media.first} 
							| to 
							strong #{data.media.last} 
							| of 
							strong #{data.media.total} 
							| items
					else
						.lead.text-muted Showing #{utils.plural(data.media.results.length, '* item')}
					.row
						each item in data.media.results
							.col-xs-4(style="padding: 1px;")
								+mediaMixin(item)
					if data.media.totalPages > 1
						ul.pagination
							if data.media.previous
								li: a(href='?page=' + data.media.previous): span.glyphicon.glyphicon-chevron-left
							else
								li.disabled: a(href='?page=' + 1): span.glyphicon.glyphicon-chevron-left
							each p, i in data.media.pages
								li(class=data.media.currentPage == p ? 'active' : null)
									a(href='?page=' + (p == '...' ? (i ? data.media.totalPages : 1) : p ))= p
							if data.media.next
								li: a(href='?page=' + data.media.next): span.glyphicon.glyphicon-chevron-right
							else
								li.disabled: a(href='?page=' + data.media.totalPages): span.entypo.glyphicon.glyphicon-chevron-right
				else
					if data.channel
						h3.text-muted There is no media in the channel #{data.channel.name}.
					else
						h3.text-muted There is no media yet.
		if true
			.col-sm-4.col-md-4
				hr
				a(data-toggle='modal', data-target='#quick-settings', title='Quick Settings')
					div(id='ledmap').led-map
				input(type='range', min='0.0', max='1.0', step='0.01', value='1.0', class='slider', style='height:50px' id='brightness-range')
				div(id='quick-settings', class='modal fade', role='dialog')
					.modal-dialog
						.modal-content
							.modal-header
								button(type='button', class='close', data-dismiss='modal') &times;
								h4.modal-title Quick Settings
							.modal-body
								p Brightness:
								input(type='range', min='0.0', max='1.0', step='0.01', value='1.0', class='slider', style='height:50px').brightnessSlider
								p Quick Display:
								form(action='/api/media/queue' method='post' class='post-form-ajax').form-horizontal.input-group
									input(name='address' type='text' placeholder='Enter URL' required).form-control
									.input-group-btn
										button(type='submit').btn.btn-default
											i.glyphicon.glyphicon-search
								hr
								a(href='/api/media/list/init').btn.btn-warning.api-get-btn Initialise Media
								a(href='/api/screenshot').btn.btn-warning.api-get-btn Screenshot
							.modal-footer
								button(type='button', data-dismiss='modal').btn.btn-default Close
				hr
				.lead.text-muted Channels
				ul.nav.nav-pills.nav-stacked
					each channel in data.channels
						li(role='presentation' class=data.channel && data.channel.id == channel.id ? 'active' : null)
							.btn-group.btn-group-justified
								a(href='/channel/'+channel.key, style='width:5%').btn.btn-default.btn-lg
									.text-left
										span.badge=channel.mediaCount
										| &ensp;
										=channel.key
								a(href='/api/media/channel/autoplay?secs=20&channel='+channel.id).btn.btn-default.api-get-btn
									span.glyphicon.glyphicon-play
								.btn-group
									a(href='#' data-toggle='dropdown').btn.btn-default.dropdown-toggle.btn-lg
										span.caret
									ul(role='menu').dropdown-menu
										li
											a(href='/api/media/channel/unsubscribe?id='+channel.id).api-get-btn Delete
					li(role='presentation')
						form(action='/api/media/channel/subscribe', method='GET').form-horizontal.post-form-ajax
							.input-group.input-group-md
								span.input-group-addon
									i.glyphicon.glyphicon-globe
								input(type='text', placeholder='Subscribe', id='name', name='name' required).form-control
							button(type='submit', id='submit').hidden
block js
	script.
		d3.json('/config-static/leds.json').then(function(data) {
			var width = 720,
				height = 720,
				padding = 15;
			var svgContainer = d3.selectAll('.led-map').append('svg')
				.attr('viewBox', '0 0 ' + width + ' ' + height);
			svgContainer.append('rect')
				.attr('width', '100%')
				.attr('height', '100%')
				.attr('fill', 'white');
			var minX = d3.min(data.leds, function(d) {return d.x});
			var maxX = d3.max(data.leds, function(d) {return d.x});
			var minY = d3.min(data.leds, function(d) {return d.y});
			var maxY = d3.max(data.leds, function(d) {return d.y});
			// flat line of points (same number as led map)
			var initCoords = [];
			for(var i=0; i<data.leds.length; i++){
				var initY = (minY+maxY)/2.0;
				var initX = minX + ((i/data.leds.length)*(maxX-minX));
				initCoords.push({'x': initX, 'y': initY});
			}
			var scaleX = d3.scaleLinear()
				.domain([minX,maxX])
				.range([padding, width-padding]);
			var scaleY = d3.scaleLinear()
				.domain([minY,maxY])
				.range([padding, height-padding]);
			var line = d3.line()
				.curve(d3.curveLinear)
				.x(function(d) { return scaleX(d.x); })
				.y(function(d) { return scaleY(d.y); });
			var path = svgContainer.append('path')
				.attr('fill', 'none')
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.5*padding)
				.datum(initCoords)
				.attr('d', line)
				.transition()
				.duration(1000)
				.attrTween('d', function() {
					return d3.interpolate(line(initCoords), line(data.leds));
				});
			var circles = svgContainer.selectAll('circle')
				.data(data.leds)
				.enter()
				.append("circle")
				.attr('cx', function(d) { return scaleX(d.x); })
				.attr('cy', function(d) { return scaleY(d.y); })
				.attr('r', 0.0)
				.attr('stroke', '#337ab7')
				.attr('stroke-width', 0.33*padding)
				.attr('fill', 'white')
				.transition()
				.delay(750)
				.duration(250)
				.attr('r', function(d) { return 0.7*padding; });
		})

